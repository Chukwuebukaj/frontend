import { ReactNode } from "react";
import { formatDate } from "../Date";
import { IoClose } from "react-icons/io5";
import { FiChevronRight } from "react-icons/fi";
import { AiOutlineInfoCircle } from "react-icons/ai";
const token = document.cookie.slice(7);

interface InvoiceData {
  icon: ReactNode;
  description: string;
  bgColor: string;
}

const currentDate = new Date();
const formattedDateTime = formatDate(currentDate);

const currentMonth = formattedDateTime.split(" ")[2].split(",")[0];

export const invoiceData: InvoiceData[] = [
  {
    icon: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="13"
        height="12"
        viewBox="0 0 13 12"
        fill="none"
      >
        <path
          d="M10.5153 3.85969L7.89031 1.23469C7.85546 1.19987 7.81409 1.17227 7.76857 1.15345C7.72305 1.13463 7.67426 1.12496 7.625 1.125H3.125C2.92609 1.125 2.73532 1.20402 2.59467 1.34467C2.45402 1.48532 2.375 1.67609 2.375 1.875V10.125C2.375 10.3239 2.45402 10.5147 2.59467 10.6553C2.73532 10.796 2.92609 10.875 3.125 10.875H9.875C10.0739 10.875 10.2647 10.796 10.4053 10.6553C10.546 10.5147 10.625 10.3239 10.625 10.125V4.125C10.625 4.07574 10.6154 4.02695 10.5966 3.98143C10.5777 3.93591 10.5501 3.89454 10.5153 3.85969ZM8 2.40516L9.34484 3.75H8V2.40516ZM9.875 10.125H3.125V1.875H7.25V4.125C7.25 4.22446 7.28951 4.31984 7.35983 4.39016C7.43016 4.46049 7.52554 4.5 7.625 4.5H9.875V10.125ZM8.375 6.375C8.375 6.47446 8.33549 6.56984 8.26517 6.64017C8.19484 6.71049 8.09946 6.75 8 6.75H5C4.90054 6.75 4.80516 6.71049 4.73484 6.64017C4.66451 6.56984 4.625 6.47446 4.625 6.375C4.625 6.27554 4.66451 6.18016 4.73484 6.10983C4.80516 6.03951 4.90054 6 5 6H8C8.09946 6 8.19484 6.03951 8.26517 6.10983C8.33549 6.18016 8.375 6.27554 8.375 6.375ZM8.375 7.875C8.375 7.97446 8.33549 8.06984 8.26517 8.14017C8.19484 8.21049 8.09946 8.25 8 8.25H5C4.90054 8.25 4.80516 8.21049 4.73484 8.14017C4.66451 8.06984 4.625 7.97446 4.625 7.875C4.625 7.77554 4.66451 7.68016 4.73484 7.60983C4.80516 7.53951 4.90054 7.5 5 7.5H8C8.09946 7.5 8.19484 7.53951 8.26517 7.60983C8.33549 7.68016 8.375 7.77554 8.375 7.875Z"
          fill="#0A2070"
        />
      </svg>
    ),
    description: `${currentMonth} invoice`,
    bgColor: "#F4F6FE",
  },

  {
    icon: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="13"
        height="12"
        viewBox="0 0 13 12"
        fill="none"
      >
        <path
          d="M9.76578 8.73609C9.83577 8.80637 9.87506 8.90152 9.87506 9.0007C9.87506 9.09989 9.83577 9.19503 9.76578 9.26531C9.71469 9.31547 8.50719 10.5 6.5 10.5C4.74734 10.5 3.47516 9.45 2.75 8.63203V9.75C2.75 9.84946 2.71049 9.94484 2.64016 10.0152C2.56984 10.0855 2.47446 10.125 2.375 10.125C2.27554 10.125 2.18016 10.0855 2.10984 10.0152C2.03951 9.94484 2 9.84946 2 9.75V7.5C2 7.40054 2.03951 7.30516 2.10984 7.23483C2.18016 7.16451 2.27554 7.125 2.375 7.125H4.625C4.72446 7.125 4.81984 7.16451 4.89016 7.23483C4.96049 7.30516 5 7.40054 5 7.5C5 7.59946 4.96049 7.69484 4.89016 7.76517C4.81984 7.83549 4.72446 7.875 4.625 7.875H3.09875C3.67625 8.59453 4.85938 9.75 6.5 9.75C8.1875 9.75 9.22531 8.74406 9.23563 8.73375C9.30625 8.66379 9.40177 8.62473 9.50119 8.62517C9.6006 8.62561 9.69577 8.66551 9.76578 8.73609ZM10.625 1.875C10.5255 1.875 10.4302 1.91451 10.3598 1.98484C10.2895 2.05516 10.25 2.15054 10.25 2.25V3.36797C9.52484 2.55 8.25266 1.5 6.5 1.5C4.49281 1.5 3.28531 2.68453 3.23469 2.73469C3.1642 2.80493 3.1245 2.90029 3.12432 2.99981C3.12415 3.09932 3.16351 3.19482 3.23375 3.26531C3.30399 3.3358 3.39936 3.3755 3.49887 3.37568C3.59838 3.37585 3.69389 3.33649 3.76437 3.26625C3.77469 3.25594 4.8125 2.25 6.5 2.25C8.14062 2.25 9.32375 3.40547 9.90125 4.125H8.375C8.27554 4.125 8.18016 4.16451 8.10983 4.23484C8.03951 4.30516 8 4.40054 8 4.5C8 4.59946 8.03951 4.69484 8.10983 4.76516C8.18016 4.83549 8.27554 4.875 8.375 4.875H10.625C10.7245 4.875 10.8198 4.83549 10.8902 4.76516C10.9605 4.69484 11 4.59946 11 4.5V2.25C11 2.15054 10.9605 2.05516 10.8902 1.98484C10.8198 1.91451 10.7245 1.875 10.625 1.875Z"
          fill="#775F00"
        />
      </svg>
    ),
    description: "Recurring invoice",
    bgColor: "#FFFBEB",
  },
];

export const cryptoTypes: string[] = ["ETH", "BTC", "BNB", "DOT", "ADA", "FTM"];
export const fiatTypes: string[] = ["USD", "EUR", "NGN", "GBP", "AUD", "JPY"];
export const daysOfTheWeek: string[] = [
  "MON",
  "TUE",
  "WED",
  "THU",
  "FRI",
  "SAT",
  "SUN",
];

export const defaultValues: { icon: ReactNode; value: string }[] = [
  {
    icon: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 16 16"
        fill="none"
      >
        <path
          d="M12.5 8C12.5 8.13261 12.4473 8.25979 12.3536 8.35355C12.2598 8.44732 12.1326 8.5 12 8.5H4C3.86739 8.5 3.74021 8.44732 3.64645 8.35355C3.55268 8.25979 3.5 8.13261 3.5 8C3.5 7.86739 3.55268 7.74021 3.64645 7.64645C3.74021 7.55268 3.86739 7.5 4 7.5H12C12.1326 7.5 12.2598 7.55268 12.3536 7.64645C12.4473 7.74021 12.5 7.86739 12.5 8ZM14.5 4.5H1.5C1.36739 4.5 1.24021 4.55268 1.14645 4.64645C1.05268 4.74021 1 4.86739 1 5C1 5.13261 1.05268 5.25979 1.14645 5.35355C1.24021 5.44732 1.36739 5.5 1.5 5.5H14.5C14.6326 5.5 14.7598 5.44732 14.8536 5.35355C14.9473 5.25979 15 5.13261 15 5C15 4.86739 14.9473 4.74021 14.8536 4.64645C14.7598 4.55268 14.6326 4.5 14.5 4.5ZM9.5 10.5H6.5C6.36739 10.5 6.24021 10.5527 6.14645 10.6464C6.05268 10.7402 6 10.8674 6 11C6 11.1326 6.05268 11.2598 6.14645 11.3536C6.24021 11.4473 6.36739 11.5 6.5 11.5H9.5C9.63261 11.5 9.75979 11.4473 9.85355 11.3536C9.94732 11.2598 10 11.1326 10 11C10 10.8674 9.94732 10.7402 9.85355 10.6464C9.75979 10.5527 9.63261 10.5 9.5 10.5Z"
          fill="#3A62F2"
        />
      </svg>
    ),
    value: "Filter",
  },
  {
    icon: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 16 16"
        fill="none"
      >
        <path
          d="M13 2H11.5V1.5C11.5 1.36739 11.4473 1.24021 11.3536 1.14645C11.2598 1.05268 11.1326 1 11 1C10.8674 1 10.7402 1.05268 10.6464 1.14645C10.5527 1.24021 10.5 1.36739 10.5 1.5V2H5.5V1.5C5.5 1.36739 5.44732 1.24021 5.35355 1.14645C5.25979 1.05268 5.13261 1 5 1C4.86739 1 4.74021 1.05268 4.64645 1.14645C4.55268 1.24021 4.5 1.36739 4.5 1.5V2H3C2.73478 2 2.48043 2.10536 2.29289 2.29289C2.10536 2.48043 2 2.73478 2 3V13C2 13.2652 2.10536 13.5196 2.29289 13.7071C2.48043 13.8946 2.73478 14 3 14H13C13.2652 14 13.5196 13.8946 13.7071 13.7071C13.8946 13.5196 14 13.2652 14 13V3C14 2.73478 13.8946 2.48043 13.7071 2.29289C13.5196 2.10536 13.2652 2 13 2ZM4.5 3V3.5C4.5 3.63261 4.55268 3.75979 4.64645 3.85355C4.74021 3.94732 4.86739 4 5 4C5.13261 4 5.25979 3.94732 5.35355 3.85355C5.44732 3.75979 5.5 3.63261 5.5 3.5V3H10.5V3.5C10.5 3.63261 10.5527 3.75979 10.6464 3.85355C10.7402 3.94732 10.8674 4 11 4C11.1326 4 11.2598 3.94732 11.3536 3.85355C11.4473 3.75979 11.5 3.63261 11.5 3.5V3H13V5H3V3H4.5ZM13 13H3V6H13V13ZM7 7.5V11.5C7 11.6326 6.94732 11.7598 6.85355 11.8536C6.75979 11.9473 6.63261 12 6.5 12C6.36739 12 6.24021 11.9473 6.14645 11.8536C6.05268 11.7598 6 11.6326 6 11.5V8.30875L5.72375 8.4475C5.60507 8.50684 5.46767 8.51661 5.34178 8.47465C5.2159 8.43268 5.11184 8.34243 5.0525 8.22375C4.99316 8.10507 4.98339 7.96767 5.02535 7.84178C5.06732 7.7159 5.15757 7.61184 5.27625 7.5525L6.27625 7.0525C6.35251 7.01434 6.43726 6.99632 6.52244 7.00015C6.60763 7.00397 6.69042 7.02952 6.76295 7.07437C6.83548 7.11921 6.89533 7.18186 6.93682 7.25636C6.97831 7.33086 7.00006 7.41473 7 7.5ZM10.6975 9.40312L9.5 11H10.5C10.6326 11 10.7598 11.0527 10.8536 11.1464C10.9473 11.2402 11 11.3674 11 11.5C11 11.6326 10.9473 11.7598 10.8536 11.8536C10.7598 11.9473 10.6326 12 10.5 12H8.5C8.40714 12 8.31612 11.9741 8.23713 11.9253C8.15815 11.8765 8.09431 11.8067 8.05279 11.7236C8.01126 11.6406 7.99368 11.5476 8.00202 11.4551C8.01036 11.3626 8.04429 11.2743 8.1 11.2L9.89875 8.80188C9.93966 8.74741 9.96902 8.68515 9.98501 8.61893C10.001 8.55271 10.0033 8.48392 9.99173 8.41679C9.98018 8.34965 9.95503 8.28558 9.91783 8.22852C9.88062 8.17145 9.83215 8.12259 9.77538 8.08493C9.71862 8.04727 9.65475 8.02161 9.58771 8.00952C9.52067 7.99743 9.45187 7.99916 9.38552 8.01462C9.31917 8.03008 9.25669 8.05893 9.20189 8.09941C9.1471 8.13988 9.10115 8.19113 9.06688 8.25C9.03501 8.30868 8.99172 8.36038 8.93955 8.40205C8.88739 8.44373 8.8274 8.47453 8.76314 8.49265C8.69887 8.51076 8.63163 8.51582 8.56538 8.50753C8.49913 8.49924 8.43521 8.47776 8.37739 8.44436C8.31957 8.41097 8.26903 8.36633 8.22874 8.31308C8.18846 8.25984 8.15925 8.19906 8.14283 8.13434C8.12641 8.06962 8.12312 8.00227 8.13316 7.93626C8.14319 7.87025 8.16634 7.80692 8.20125 7.75C8.36641 7.46418 8.62125 7.24083 8.92626 7.11456C9.23127 6.9883 9.56941 6.96617 9.88827 7.05162C10.2071 7.13707 10.4889 7.32531 10.6899 7.58717C10.8909 7.84904 10.9999 8.16989 11 8.5C11.0011 8.82609 10.8948 9.14346 10.6975 9.40312Z"
          fill="#3A62F2"
        />
      </svg>
    ),
    value: "Date",
  },
  {
    icon: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 16 16"
        fill="none"
      >
        <path
          d="M7.35354 10.6463C7.40003 10.6927 7.43691 10.7479 7.46207 10.8086C7.48723 10.8693 7.50018 10.9343 7.50018 11C7.50018 11.0657 7.48723 11.1308 7.46207 11.1915C7.43691 11.2522 7.40003 11.3073 7.35354 11.3538L5.35354 13.3538C5.3071 13.4003 5.25196 13.4371 5.19126 13.4623C5.13056 13.4875 5.0655 13.5004 4.99979 13.5004C4.93408 13.5004 4.86902 13.4875 4.80832 13.4623C4.74762 13.4371 4.69248 13.4003 4.64604 13.3538L2.64604 11.3538C2.59958 11.3073 2.56273 11.2522 2.53759 11.1915C2.51245 11.1308 2.49951 11.0657 2.49951 11C2.49951 10.9343 2.51245 10.8693 2.53759 10.8086C2.56273 10.7479 2.59958 10.6927 2.64604 10.6463C2.73986 10.5525 2.86711 10.4997 2.99979 10.4997C3.06549 10.4997 3.13054 10.5127 3.19124 10.5378C3.25193 10.563 3.30708 10.5998 3.35354 10.6463L4.49979 11.7932V3.00003C4.49979 2.86742 4.55247 2.74024 4.64624 2.64647C4.74 2.55271 4.86718 2.50003 4.99979 2.50003C5.1324 2.50003 5.25957 2.55271 5.35334 2.64647C5.44711 2.74024 5.49979 2.86742 5.49979 3.00003V11.7932L6.64604 10.6463C6.69248 10.5998 6.74762 10.5629 6.80832 10.5377C6.86902 10.5126 6.93408 10.4996 6.99979 10.4996C7.0655 10.4996 7.13056 10.5126 7.19126 10.5377C7.25196 10.5629 7.3071 10.5998 7.35354 10.6463ZM13.3535 4.64628L11.3535 2.64628C11.3071 2.59979 11.252 2.56291 11.1913 2.53775C11.1306 2.51259 11.0655 2.49963 10.9998 2.49963C10.9341 2.49963 10.869 2.51259 10.8083 2.53775C10.7476 2.56291 10.6925 2.59979 10.646 2.64628L8.64604 4.64628C8.55222 4.7401 8.49951 4.86735 8.49951 5.00003C8.49951 5.13271 8.55222 5.25996 8.64604 5.35378C8.73986 5.4476 8.86711 5.50031 8.99979 5.50031C9.13247 5.50031 9.25972 5.4476 9.35354 5.35378L10.4998 4.2069V13C10.4998 13.1326 10.5525 13.2598 10.6462 13.3536C10.74 13.4473 10.8672 13.5 10.9998 13.5C11.1324 13.5 11.2596 13.4473 11.3533 13.3536C11.4471 13.2598 11.4998 13.1326 11.4998 13V4.2069L12.646 5.35378C12.7399 5.4476 12.8671 5.50031 12.9998 5.50031C13.1325 5.50031 13.2597 5.4476 13.3535 5.35378C13.4474 5.25996 13.5001 5.13271 13.5001 5.00003C13.5001 4.86735 13.4474 4.7401 13.3535 4.64628Z"
          fill="#3A62F2"
        />
      </svg>
    ),
    value: "Sort",
  },
];
export const invoiceIcon: ReactNode = (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="80"
    height="81"
    viewBox="0 0 80 81"
    fill="none"
  >
    <path
      d="M66.7688 26.2313L49.2688 8.73125C49.0364 8.49916 48.7606 8.31513 48.4571 8.18966C48.1536 8.06419 47.8284 7.99974 47.5 8H17.5C16.1739 8 14.9021 8.52678 13.9645 9.46447C13.0268 10.4021 12.5 11.6739 12.5 13V68C12.5 69.3261 13.0268 70.5979 13.9645 71.5355C14.9021 72.4732 16.1739 73 17.5 73H62.5C63.8261 73 65.0979 72.4732 66.0355 71.5355C66.9732 70.5979 67.5 69.3261 67.5 68V28C67.5003 27.6716 67.4358 27.3464 67.3103 27.0429C67.1849 26.7394 67.0008 26.4636 66.7688 26.2313ZM50 16.5344L58.9656 25.5H50V16.5344ZM62.5 68H17.5V13H45V28C45 28.663 45.2634 29.2989 45.7322 29.7678C46.2011 30.2366 46.837 30.5 47.5 30.5H62.5V68ZM52.5 43C52.5 43.663 52.2366 44.2989 51.7678 44.7678C51.2989 45.2366 50.663 45.5 50 45.5H30C29.337 45.5 28.7011 45.2366 28.2322 44.7678C27.7634 44.2989 27.5 43.663 27.5 43C27.5 42.337 27.7634 41.7011 28.2322 41.2322C28.7011 40.7634 29.337 40.5 30 40.5H50C50.663 40.5 51.2989 40.7634 51.7678 41.2322C52.2366 41.7011 52.5 42.337 52.5 43ZM52.5 53C52.5 53.663 52.2366 54.2989 51.7678 54.7678C51.2989 55.2366 50.663 55.5 50 55.5H30C29.337 55.5 28.7011 55.2366 28.2322 54.7678C27.7634 54.2989 27.5 53.663 27.5 53C27.5 52.337 27.7634 51.7011 28.2322 51.2322C28.7011 50.7634 29.337 50.5 30 50.5H50C50.663 50.5 51.2989 50.7634 51.7678 51.2322C52.2366 51.7011 52.5 52.337 52.5 53Z"
      fill="#3A62F2"
    />
  </svg>
);

export const createInvoiceNavBar: { title: string; icon: ReactNode }[] = [
  { title: "Create Invoice", icon: <IoClose /> },
  { title: "Details", icon: <FiChevronRight /> },
  { title: "Payment", icon: <FiChevronRight /> },
  { title: "Terms", icon: <FiChevronRight /> },
  { title: "Summary", icon: null },
];

export const fieldTitles: { title: string; id: string; type: string }[] = [
  { title: "Client Name", id: "client-name", type: "text" },
  { title: "Client Email", id: "client-email", type: "email" },
  { title: "Start Date", id: "start-date", type: "date" },
  { title: "End Date", id: "end-date", type: "date" },
];

export const addServiceData: {
  title: string;
  icon: ReactNode | null;
  type: string;
}[] = [
  { title: "Service Title", icon: null, type: "text" },
  { title: "Service Description", icon: <AiOutlineInfoCircle />, type: "text" },
  { title: "Qty", icon: null, type: "number" },
  { title: "Rate", icon: null, type: "number" },
];

export const paymentData: { type: string; title: string }[] = [
  { type: "text", title: "Bank Name" },
  { type: "number", title: "Account Number" },
  { type: "number", title: "Installment" },
  { type: "number", title: "Initial Deposit %" },
  { type: "number", title: "Tax %" },
  { type: "number", title: "Discount %" },
];

export const invoiceTableHeaderData = [
  "Invoice address",
  "Customer",
  "Duration",
  "Start date",
  "End date",
  "Status",
  "Payment",
  "Amount",
];

export const symbol: { currency: string; symbol: string }[] = [
  {
    currency: "USD",
    symbol: "$",
  },
  {
    currency: "EUR",
    symbol: "€",
  },
  {
    currency: "NGN",
    symbol: "₦",
  },
  {
    currency: "GBP",
    symbol: "£",
  },
  {
    currency: "AUD",
    symbol: "$",
  },
  {
    currency: "JPY",
    symbol: "¥",
  },
];

export interface InvoiceTableProps {
  "Invoice address": string;
  Customer: string;
  Duration: string;
  "Start date": string;
  "End date": string;
  Status: InvoiceStatus;
  Payment: string;
  Amount: string;
}

export interface ServiceDetailsProps {
  "Service Title": string;
  "Service Description": string;
  Qty: number;
  Rate: number;
}

export interface InvoiceService {
  title: string;
  description: string;
  quantity: number;
  rate: number;
}

export enum InvoiceStatus {
  APPROVED = "Approved",
  COMPLETE = "Complete",
  DISPUTED = "Disputed",
  PAID = "Paid",
  PENDING = "Pending",
}

export interface InvoiceDocument {
  invoiceAddress: string;
  clientName: string;
  clientEmail: string;
  startDate: string;
  endDate: string;
  duration: string;
  paymentType: string;
  currency: string;
  services: InvoiceService[];
  amount: number;
  bankName: string;
  accountNumber: number;
  installment: number;
  initialDepositPercentage: string;
  initialDeposit: number;
  taxPercentage: string;
  tax: number;
  discountPercentage: string;
  discount: number;
  termsAndConditions: string[];
  accepted: boolean;
  status: InvoiceStatus;
  createdAt?: string | number | Date;
  updatedAt?: string | number | Date;
}

export const convertServiceDetailsToService = (
  details: ServiceDetailsProps
): InvoiceService => {
  return {
    title: details["Service Title"],
    description: details["Service Description"],
    quantity: details.Qty,
    rate: details.Rate,
  };
};

export const config = {
  headers: {
    Authorization: `Bearer ${token}`,
    "Content-Type": "application/json",
  },
};

export const changeDateFormat = (date: string) => {
  const inputDate = new Date(date);
  const dateFormatter = new Intl.DateTimeFormat("en", {
    year: "numeric",
    month: "short",
    day: "numeric",
  });
  const formattedDate = dateFormatter.format(inputDate);
  const [month, day, year] = formattedDate.split(" ");
  const formattedMonth = month.charAt(0).toUpperCase() + month.slice(1);
  const finalFormattedDate = `${day} ${formattedMonth} ${year}`;
  return finalFormattedDate
    .split("")
    .filter((item) => item !== ",")
    .join("");
};
